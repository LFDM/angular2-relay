input AttendEventInput {
  eventId: ID!
  clientMutationId: String!
}

type AttendEventPayload {
  event: Event
  user: User
  clientMutationId: String!
}

type Event implements Node {
  id: ID!
  name: String
  description: String
  date: String
  going: Int
  userIsAttending: Boolean
}

type EventConnection {
  pageInfo: PageInfo!
  edges: [EventEdge]
}

type EventEdge {
  node: Event
  cursor: String!
}

type Mutation {
  attendEvent(input: AttendEventInput!): AttendEventPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  root: Root
  node(id: ID!): Node
}

type Root {
  user: User
  availableEvents: [Event]
}

type User implements Node {
  id: ID!
  firstName: String
  lastName: String
  events(after: String, first: Int, before: String, last: Int): EventConnection
}
